'use strict';

(function ($) {
    var channelsSelected = false;
    var chart = $('.form__chart');
    var fieldsets;
    var form = $('#cxmaturity');
    var formNavbar = $('#cxmaturity .navbar');
    var freeEmailProviders = [];
    var isFullChart = true;
    var jsonPath = '/wp-content/themes/anexinet/public/json/';
    var localStorageItem = 'cxmaturity';
    var maxChannelScore = 0;
    var maxTotalScore = 0;
    var questions;
    var questionsCompleted;
    var questionScore = 0;
    var numberOfQuestions = 0;
    var scoreModifier = 0;
    var totalScore = 0;

    var chartMargin = { top: 32, right: 32, bottom: 32, left: 32 },
        chartWidth = chart.innerWidth() === 0 ? 0 : chart.innerWidth() - chartMargin.top * 2,

    //Math.min(700, window.innerWidth - 10) - margin.left - margin.right,
    chartHeight = chart.innerWidth() === 0 ? 0 : chart.innerWidth() - chartMargin.top * 2; //Math.min(width, window.innerHeight - margin.top - margin.bottom - 20);

    //////////////////////////////////////////////////////////////
    ////////////////////////// Data //////////////////////////////
    //////////////////////////////////////////////////////////////

    var data = [[]];
    /*
        var dataFullChart = [
            //Quadrant 2
            {axis:"",value:0}, // Omit channels axis as it is already being dynamically populated
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value: 0},
            //Quadrant 3
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            //Quadrant 4
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value:0},
            {axis:"",value: 0},
        ];
        */
    //////////////////////////////////////////////////////////////
    //////////////////// Draw the Chart //////////////////////////
    //////////////////////////////////////////////////////////////

    var color = d3.scale.ordinal().domain(['square', 'circle', 'down', 'up']).range(['#85ff00']);

    var radarChartOptions = {
        w: chartWidth,
        h: chartHeight,
        margin: chartMargin,
        maxValue: 1,
        levels: 4,
        opacityArea: 0.6,
        roundStrokes: true,
        color: color
    };

    function addResumeButton() {
        var localStorage = getLocalStorage();

        if (localStorage) {
            if (JSON.parse(localStorage).inputs.length) {
                $('.intro__buttons.start').hide();
                $('.intro__buttons.resume').show();
            }
        }
    }

    function addQuestionInput(value) {
        questions.each(function (key, question) {
            var fieldsetId = $(question).parent().prop('id').replace('fieldset-', '');
            var fieldsetName = $(question).parent().data('fieldset');
            var inputId = 'fs' + fieldsetId + 'q' + key;
            var labelArray = [];

            if (fieldsetId === '0') {
                return;
            } else {
                if ($(question).find('input[value="' + value + '"]').length === 0) {
                    var label = $('#fieldset-0 .question:first-of-type input[value="' + value + '"]').parent().clone();
                    var keyIndex = label.find('input').data('index');

                    label.find('input').attr('id', inputId + '-' + keyIndex).attr('name', inputId + '[]').prop('checked', false);
                    label.attr('for', inputId + '-' + keyIndex).addClass('animated');

                    labelArray.push(label);
                    labelArray.sort(function (a, b) {
                        return $(a).find('input').data('weight') < $(b).find('input').data('weight') ? 1 : -1;
                    });

                    $.each(labelArray, function () {
                        $(question).find('.question__options').append(this);
                    });
                }
            }
        });
    }

    function animateQuestion(question) {
        var questionClass = 'fadeInDown';
        var questionLabels = question.find('.question__options label');
        var questionText = question.find('.question__text');

        questionText.addClass(questionClass);

        questionText.delay(1000).queue(function () {
            // Wait for 1 second.
            $(this).removeClass(questionClass).dequeue();
        });

        questionLabels.css('opacity', 0).removeClass('zoomIn');
        $.each(questionLabels, function (i, label) {
            setTimeout(function () {
                $(label).css('opacity', 1).addClass('zoomIn');
            }, i * 125);
        });
    }

    function checkIfAllQuestionsAnswered() {
        var countAnsweredQuestions = 0;

        $('.question').each(function () {
            if ($(this).find('input:checked').length) {
                countAnsweredQuestions++;
            }
        });

        if (countAnsweredQuestions === $('.question').length) {
            return true;
        } else {
            return false;
        }
    }

    function checkIfAllRequiredQuestionsAnswered() {
        var countAnsweredQuestions = 0;

        $('.question.required').each(function () {
            if ($(this).find('input:checked').length) {
                countAnsweredQuestions++;
            }
        });

        if (countAnsweredQuestions === $('.question.required').length) {
            return true;
        } else {
            return false;
        }
    }

    function checkIfCurrentQuestionAnswered(question) {
        var questionAnswered = false;

        $(question).find('input').each(function () {
            if ($(this).is(':checked')) {
                questionAnswered = true;
            }
        });

        return questionAnswered;
    }

    function clearQuestionValues() {
        var fieldset = $(this).closest('fieldset');
        var question = $(this).closest('.question');

        question.find('input').each(function (key, input) {
            $(input).prop('checked', false);
            $(input).parent().removeClass('is-selected');
        });

        formNavbar.find('.circle[data-question="' + question.data('question') + '"]').removeClass('is-complete');

        if ($(this).closest('.question').hasClass('master')) {
            $('#fieldset-0 input').each(function () {
                $(this).prop('checked', false);
                $(this).removeClass('is-selected');
            });
            removeQuestionInput();
        }

        deleteLocalStorage();

        repaintChart();
    }

    function deleteLocalStorage() {
        questionsCompleted = [];
        window.localStorage.removeItem(localStorageItem);
    }

    function displayEmptyForm() {
        form.find('input').each(function (key, input) {
            $(input).prop('checked', false);
            $(input).parent().removeClass('is-selected');
        });

        formNavbar.find('.circle').removeClass('is-complete');

        deleteLocalStorage();
        navigateFormPopstate();
        displayMaturityAssessment();
    }

    function displayFirstIncompleteQuestion() {
        var fieldset;
        var question;
        var questionIsIncomplete = false;

        formNavbar.find('.circle').each(function () {
            if (!questionIsIncomplete) {
                if (!$(this).hasClass('is-complete')) {
                    fieldset = $(this).closest('[data-fieldset]').data('fieldset');
                    question = $(this).data('question');
                    questionIsIncomplete = true;
                }
            }
        });

        if (questionIsIncomplete) {
            formNavbar.find('.circle').each(function () {
                $(this).removeClass('is-selected');
            });

            formNavbar.find('li').each(function () {
                $(this).removeClass('is-selected');
            });

            $('fieldset').hide();
            $('.question').hide();

            formNavbar.find('[data-question="' + question + '"]').addClass('is-selected').addClass('is-complete');
            formNavbar.find('.btn.is-selected').closest('[data-fieldset]').addClass('is-selected'); //Order is important! Must come after previous 'find' statement

            form.find('.question[data-question="' + question + '"]').show().addClass('is-selected');
            form.find('fieldset[data-fieldset="' + fieldset + '"]').show();

            $('section.form').removeClass('is-hidden');
            $('section.results').addClass('is-hidden');
        } else {
            $('section.form').addClass('is-hidden');
            $('section.results').removeClass('is-hidden');
        }

        $('section.intro').addClass('is-hidden');

        $('.question.required').each(function () {
            if (checkIfCurrentQuestionAnswered($(this))) {
                $(this).find('.btn--next').prop('disabled', false);
            }
        });

        updateOverallScore();
        displayMaturityAssessment();
    }

    function displayMaturityAssessment() {
        $('.intro').addClass('is-hidden');
        $('.form').removeClass('is-hidden');
        $('.results').addClass('is-hidden');

        getMaxTotalScore();
        getScoreModifier();
        //setButtonNextDisabled();
        updateChartSize();
        scrollPageToTopOfForm();
    }

    function formatId(id) {
        if (!id) {
            return false;
        }

        id = id.replace(/-\s/g, '');
        id = id.replace(/\s/g, '-');
        id = id.toLowerCase();

        return id;
    }

    function generateGuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0,
                v = c == 'x' ? r : r & 0x3 | 0x8;
            return v.toString(16);
        });
    }

    function generatePdfLink(e) {
        e.preventDefault();

        var chartData = getChartValues();
        var form = $(this);
        var formId = form.data('form-id');
        var portalId = form.data('portal-id');

        var company = form.find('.hs-company input');
        var fname = form.find('.hs-fname input');
        var email = form.find('.hs-email input');
        var lname = form.find('.hs-lname input');
        var phone = form.find('.hs-phone input');

        var chartDataAll = plotChartValues(true);
        RadarChart('#svgChartAll', chartDataAll, radarChartOptions);
        styleSvgChart($('#svgChartAll svg'), true);

        var chartDataSingle = plotChartValues(false);
        RadarChart('#svgChartSingle', chartDataSingle, radarChartOptions);
        styleSvgChart($('#svgChartSingle svg'), false);

        updateResultsContainer(chartData);

        if (isValidEmail(email.val())) {
            html2canvas(document.getElementById('resultsPrint'), { scale: 2 }).then(function (canvas) {
                document.body.appendChild(canvas);

                var canvas = document.querySelector('canvas');
                var dataUri = canvas.toDataURL();
                var guid = generateGuid();
                var outputUrl = 'my-maturity-assessment/';

                var formData = JSON.stringify({
                    //"chart": chartData,
                    'file': dataUri,
                    'guid': guid,
                    'outputUrl': outputUrl,
                    'pdfSize': {
                        'h': canvas.height,
                        'w': canvas.width
                    },
                    'values': {
                        'company': company.val(),
                        'email': email.val(),
                        'formId': formId,
                        'fname': fname.val(),
                        'lname': lname.val(),
                        'pageTitle': document.getElementsByTagName('title')[0].innerHTML,
                        'pageUrl': window.location.href,
                        'phone': phone.val(),
                        'portalId': portalId
                    }
                });

                $('canvas').remove();

                $.ajax({
                    url: generatepdf.ajax_url,
                    data: {
                        action: 'generate_pdf',
                        formData: formData
                    },
                    type: 'post',
                    beforeSend: function beforeSend() {
                        form.hide();
                        form.parent().append('<p>Thanks for submitting the form. Your PDF is being created and will be sent to you shortly.</p>');
                    },
                    success: function success(result) {
                        console.log(result);
                        //window.open(result);

                        $('.results__form').html('<a class="btn" href="' + result + '" id="downloadPdf" style="color: #fff; margin-top: 1rem;">Download My Report</a>');

                        email.removeClass('error');
                    },
                    error: function error(xhr, ajaxOptions, thrownError) {}
                });
            });
        } else {
            email.addClass('error');
        }
    }

    function getChannels() {
        var path = '/inc/json/channels.json';
        var path = '/wp-content/themes/anexinet/public/json/channels.json';

        $.getJSON(path, function (result) {
            var channelInputsArray = [];
            var index = 0;
            maxChannelScore = 0;

            $.each(result, function (key, field) {
                var channel = result[key];
                var iconPath = '/public/images/icons/';
                var iconPath = '/wp-content/themes/anexinet/public/images/cxmaturity/icons/';
                maxChannelScore += parseInt(channel.weight);

                channelInputsArray.push('<label class="channel size-' + channel.weight + '" for="channel' + index + '" style="opacity: 1;"><input data-index="' + index + '" data-weight="' + channel.weight + '" id="channel' + index + '" name="channels[]" type="checkbox" value="' + key + '" />' + key + '  <span class="channel__icon"><img src="' + (iconPath + channel.icon) + '.svg" alt="' + key + '" /></span> <span class="channel__description">' + channel.description + '</span></label>');

                index++;
            });

            //* shuffle the array for random output
            //channelInputsArray.sort(function() { return 0.5 - Math.random() });

            $('#fieldset-0 .question:first-of-type .question__options').html(channelInputsArray.join(''));
        });
    }

    function getChartValues() {
        var chartValues = { 'fieldsets': {}, 'questions': {} };
        var fieldsets = $(form).find('fieldset');
        var fieldsetScore = 0;
        var maxPossibleScore = maxChannelScore * $(form).find('.question').length;
        var overallAverageScore;
        var questionNumber = 0;
        totalScore = 0;

        $.each(fieldsets, function () {
            var countQuestions = 0;
            var fieldsetIndex = $(this).attr('id').replace('fieldset-', '');
            var fieldsetName = $(this).data('fieldset');
            var fieldsetValues = {};
            fieldsetScore = 0;

            var questions = $(this).find('.question');
            $.each(questions, function () {
                var inputs = $(this).find('input');
                var inputValues = [];
                var questionFinalScore;
                var questionName = $(this).data('question');
                var questionScore = 0;
                var score = 0;

                if (questionName === 'Digital and Physical') {
                    var digitalChannelsScore = chartValues['questions'][0]['score'];
                    score = digitalChannelsScore / maxChannelScore * parseFloat($(this).find('input:checked').data('modifier')).toFixed(2) * maxChannelScore;

                    questionFinalScore = score;
                    questionScore = score * maxChannelScore;
                    totalScore += score;
                    inputValues.push($(this).find('input:checked').val());
                } else {
                    $.each(inputs, function () {
                        if ($(this).is(':checked')) {
                            score = $(this).is('[type="checkbox"]') ? parseInt($(this).data('weight')) : parseFloat($(this).data('modifier')).toFixed(2) * maxChannelScore;

                            questionScore += score;
                            totalScore += score;

                            inputValues.push($(this).val());
                        }
                    });

                    questionFinalScore = questionScore / maxChannelScore;
                }
                //fieldsetValues['questions'][questionName] = { 'score' : questionScore, 'channelsSelected' : inputValues };
                chartValues['questions'][questionNumber] = { 'fieldset': fieldsetIndex, 'name': questionName, 'score': questionFinalScore, 'channelsSelected': inputValues };

                countQuestions++;
                questionNumber++;
                fieldsetScore += questionScore;
            });

            fieldsetValues['averageScore'] = fieldsetScore / countQuestions / maxChannelScore;
            fieldsetValues['name'] = fieldsetName;

            chartValues['fieldsets'][fieldsetIndex] = fieldsetValues;
        });

        chartValues['maxPossibleScore'] = maxPossibleScore;
        chartValues['totalScore'] = totalScore;

        return chartValues;
    }

    function getFormNavbar() {
        var itemArray = [];

        fieldsets.each(function (index, fieldset) {
            var fieldsetId = parseInt($(fieldset).prop('id').replace('fieldset-', ''));
            var fieldsetKey = $(fieldset).data('fieldset');
            var fieldsetQuestions = $(fieldset).find('.question');
            var fieldsetText;

            if (fieldsetKey === 'reach') {
                fieldsetText = 'Omni-channel Reach';
            } else {
                fieldsetText = fieldsetKey;
            }

            var listItem = '\n                <li ' + (fieldsetId === 0 ? 'class="is-selected"' : '') + ' data-fieldset="' + fieldsetKey + '">\n                    <div class="form__progress"><span>' + fieldsetText + '</span>';

            $.each(fieldsetQuestions, function () {
                listItem += '<button class="btn circle" data-question="' + $(this).data('question') + '"type="button"></button>';
            });

            listItem += '</div><ul>';

            $.each(fieldsetQuestions, function () {
                listItem += '<li data-question="' + $(this).data('question') + '">' + $(this).data('question') + '</li>';
            });

            listItem += '</ul></li>';

            itemArray.push(listItem);
        });

        formNavbar.html(itemArray.join(''));
    }

    function getFreeEmailProviders() {
        var path = jsonPath + 'free-email-providers.json';
        console.log(path);
        $.getJSON(path, function (result) {
            console.log(result);
            freeEmailProviders = result['providers'].split(',');
        });
    }

    function getLocalStorage() {
        return localStorage.getItem(localStorageItem);
    }

    function getMaturityLevel(score) {
        var maturityLevel = '';

        if (score <= 0.25) {
            maturityLevel = 'Minimal';
        } else if (score <= 0.50) {
            maturityLevel = 'Emerging';
        } else if (score <= 0.75) {
            maturityLevel = 'Engaging';
        } else {
            maturityLevel = 'Leading';
        }

        return maturityLevel;
    }

    function getMaxTotalScore() {
        maxTotalScore = maxChannelScore * questions.length; // Add in channels from (Step 1 & 2)
    }

    function getQuestions() {
        var path = '/inc/json/questions.json';
        var path = '/wp-content/themes/anexinet/public/json/questions.json';

        $.getJSON(path, function (result) {
            var fieldsetIndex = 0;
            var firstFieldset = form.find('fieldset:first-of-type');
            var firstQuestion = firstFieldset.find('.question:first-of-type');
            var resultSize = Object.keys(result).length;
            var savedForm = getLocalStorage();

            $.each(result, function (key, fieldset) {
                var fieldset = result[key];
                var fieldsetHtml = '';
                var fieldsetKey = key;
                var questionIndex = 0;
                numberOfQuestions += Object.keys(fieldset).length;

                $.each(fieldset, function (key, question) {
                    var buttonText = 'Next';
                    var question = fieldset[key];
                    var questionId = formatId(question.title);
                    var questionKey = key;

                    if (resultSize - 1 === fieldsetIndex && Object.keys(fieldset).length - 1 === questionIndex) {
                        buttonText = 'Complete Assessment';
                    }

                    var buttonNext = '<button class="btn btn--next" data-direction="next" type="button">' + buttonText + '</button>';
                    var buttonPrev = questionId !== 'digital-channels' ? '<button class="btn btn--prev" data-direction="prev" type="button">Previous</button>' : '';

                    fieldsetHtml += '\n                        <div class="question" id="' + questionId + '" data-question="' + question.title + '">\n                            <div class="question__text animated">' + question.text + '</div>\n                            <div class="question__options"></div>\n                            <div class="question__buttons"> \n                                ' + buttonNext + '\n                                ' + buttonPrev + ' \n                                <button class="btn btn--clear" type="button">Clear</button>\n                            </div>\n                        </div>';

                    questionIndex++;
                });

                fieldsetIndex++;

                //form.append(`<fieldset data-fieldset="${fieldsetKey}" id="${fieldsetKey}">${fieldsetHtml}</fieldset>`);
                form.append('<fieldset data-fieldset="' + fieldsetKey + '" id="fieldset-' + fieldsetIndex + '">' + fieldsetHtml + '</fieldset>');
            });

            fieldsets = $('fieldset');
            questions = $('.question');

            getFormNavbar();

            if (savedForm) {
                var parseSavedForm = JSON.parse(savedForm);

                if (parseSavedForm.inputs.length > 2) {
                    $.each(parseSavedForm.inputs, function () {
                        var input = '#' + this;
                        var question = $(input).closest('.question').data('question');

                        $(input).prop('checked', true);

                        if ($(input).prop('id') && $(input).prop('id').indexOf('channel') > -1) {
                            addQuestionInput($(input).val());
                        }

                        $(input).parent().addClass('is-selected');

                        formNavbar.find('button').each(function () {
                            if ($(this).data('question') === question) {
                                $(this).addClass('is-complete');
                            }
                        });
                    });

                    if (parseSavedForm.questionsCompleted) {
                        if (parseSavedForm.questionsCompleted.length > 2) {
                            $.each(parseSavedForm.questionsCompleted, function () {
                                formNavbar.find('.circle[data-question="' + this + '"]').addClass('is-complete');
                                $('.question[data-question="' + this + '"] .btn--next').prop('disabled', false);
                            });
                        }

                        questionsCompleted = parseSavedForm.questionsCompleted;
                    }

                    $('#fieldset-0 .question:first-of-type input').each(function () {
                        if (this.checked) {
                            addQuestionInput(this.value);
                        }
                    });
                }
            } else {
                questionsCompleted = [];
                console.log('No saved fields found');;
            }

            formNavbar.find('[data-fieldset="' + firstFieldset.data('fieldset') + '"]').addClass('is-selected');
            formNavbar.find('[data-question="' + firstQuestion.data('question') + '"]').addClass('is-selected');

            updateChartSize();
        });
    }

    function getQuestionScore(question) {
        var inputs = $(question).find('input');
        questionScore = 0;

        inputs.each(function () {
            if ($(this).is(':checked')) {
                var inputValue = $(this).data('weight') ? parseInt($(this).data('weight')) : parseFloat($(this).data('modifier')).toFixed(2);

                if (inputValue < 1) {
                    inputValue = inputValue * maxChannelScore;
                }

                questionScore += inputValue;
            }
        });

        questionScore = questionScore / maxChannelScore;
    }

    function getScoreModifier() {
        return scoreModifier = $('#fieldset-0 input[type="radio"]:checked').data('modifier') ? $('#fieldset-0 input[type="radio"]:checked').data('modifier') : 0;
    }

    function getTotalScore() {
        totalScore = 0;

        form.find('input[type="checkbox"]').each(function () {
            var question = $(this).closest('.question').data('question');
            if ($(this).is(':checked')) {
                totalScore += parseInt($(this).data('weight'));
            }
        });
    }

    function isValidEmail(email) {
        var domain = email.split('@')[1];
        var isFreeEmailProvider = false;
        var isValid = false;

        $.each(freeEmailProviders, function () {
            if (domain === this) {
                isFreeEmailProvider = true;
                console.log(this, email);
            }
        });

        if (email.indexOf('@') > -1 && email.indexOf('.') > -1) {
            isValid = true;
        } else {
            isValid = false;
        }

        if (email.length > 0 && 1 < email.split('.')[1] < 4) {
            isValid = true;
        } else {
            isValid = false;
        }

        if (!isFreeEmailProvider) {
            isValid = true;
        } else {
            isValid = false;
        }

        return isValid;
    }

    function navigateForm(e) {
        var currentQuestion = $(this).data('question') ? $('.question[data-question="' + $(this).data('question') + '"]') : $(this).closest('[data-question]');
        var currentFieldset = currentQuestion.closest('[data-fieldset]');
        var displayNextQuestion = currentFieldset.is('#fieldset-0') && !checkIfCurrentQuestionAnswered() ? false : true;
        var direction = $(this).is('button') ? $(this).data('direction') : '';
        var findCurrent = $(this).data('question') ? true : false;
        var nextFieldset = currentFieldset.next();
        var nextQuestion = currentQuestion.next();
        var prevFieldset = currentFieldset.prev();
        var prevQuestion = currentQuestion.prev();

        var fieldset = findCurrent ? currentFieldset : '';
        var question = findCurrent ? currentQuestion : '';

        if ($(this).hasClass('btn--next')) {
            if (!nextQuestion.hasClass('question')) {
                fieldset = nextFieldset;
            } else {
                fieldset = currentFieldset;
            }
            question = nextQuestion;
        }

        if ($(this).hasClass('btn--prev')) {
            if (!prevQuestion.hasClass('question')) {
                fieldset = prevFieldset;
            } else {
                fieldset = currentFieldset;
            }
            question = prevQuestion;
        }

        //questionsCompleted.push(question.data('question'));
        updateLocalStorage();

        $('fieldset').hide();
        $('.question').hide().removeClass('is-selected');

        if (question.hasClass('question')) {
            $('fieldset[data-fieldset="' + fieldset.data('fieldset') + '"]').show();
            $('.question[data-question="' + question.data('question') + '"]').show().addClass('is-selected');

            toggleFormNavbarSelected(fieldset.data('fieldset'), question.data('question'));
        } else {
            if ($(this).hasClass('btn--prev')) {
                question = fieldset.find('.question:last-of-type');
            } else {
                question = fieldset.find('.question:first-of-type');
            }

            if (fieldset.length) {
                $('fieldset[data-fieldset="' + currentFieldset.data('fieldset') + '"]').hide();
                $('fieldset[data-fieldset="' + fieldset.data('fieldset') + '"]').show();
                $('.question[data-question="' + question.data('question') + '"]').show().addClass('is-selected');

                toggleFormNavbarSelected(fieldset.data('fieldset'), question.data('question'));
            } else {
                if ($(this).hasClass('btn--next')) {
                    $('section.form').addClass('is-hidden');
                    $('section.results').removeClass('is-hidden');
                    updateChartSize();
                }

                if ($(this).hasClass('btn--prev')) {
                    $('section.intro').removeClass('is-hidden');
                    $('section.form').addClass('is-hidden');
                }
            }
        }

        if (direction) {}

        if (question) {
            var hash = formatId(question.data('question'));

            if (hash === false) {
                hash = 'results';
            }

            history.pushState(null, null, '#' + hash);
        }

        updateOverallScore();
    }

    function navigateFormPopstate() {
        if ($('.intro').hasClass('is-hidden')) {
            var hash = location.hash;

            $('fieldset').hide();
            $('.question').hide();

            if (hash === '#results') {
                //* Results page
                $('section.form').addClass('is-hidden');
                $('section.intro').addClass('is-hidden');
                $('section.results').removeClass('is-hidden');
            } else if (!hash) {
                //* Intro page
                $('section.form').addClass('is-hidden');
                $('section.intro').removeClass('is-hidden');
                $('section.results').addClass('is-hidden');
            } else {
                //* Questions
                $('section.form').removeClass('is-hidden');
                $('section.intro').addClass('is-hidden');
                $('section.results').addClass('is-hidden');
            }

            if (hash) {
                var question = $(location.hash);
                var questionKey = question.data('question');
                var fieldset = question.closest('fieldset');
                var fieldsetKey = fieldset.data('fieldset');

                $('[data-fieldset]').removeClass('is-selected');
                $('[data-question]').removeClass('is-selected');

                question.show().addClass('is-selected');
                fieldset.show();

                $('[data-fieldset="' + fieldsetKey + '"]').addClass('is-selected');
                $('[data-question="' + questionKey + '"]').addClass('is-selected');

                //animateQuestion( question );
            }
        }

        updateChartSize();
    }

    function plotChartValues() {
        var isSingleChart = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

        var channelsTotal = 0;
        var data = [];
        var dataFullChart = [];
        var dataNew = [];
        var inputTotal = 0;
        var scoreModifier = getScoreModifier();

        if (questions.length) {
            if (isSingleChart) {
                dataNew.push({ axis: '', value: 0 });
            }

            questions.each(function (key, question) {
                getQuestionScore(question);

                var dataObj = { axis: '', value: questionScore };
                dataNew.push(dataObj);
            });

            if (isSingleChart) {
                var dataObj = { axis: '', value: 0 };

                for (var i = 0; i < 3; i++) {
                    var newQuadrant = [];

                    newQuadrant.push(dataObj);
                    questions.each(function () {
                        newQuadrant.push(dataObj);
                    });

                    $.merge(dataNew, newQuadrant);
                }
            }
            data.push(dataNew); //* Create 4 quadrant chart
        }

        return data;
    }

    function removeQuestionInput() {
        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

        channelsSelected = false;

        questions.each(function () {
            if (!$(this).parent().is('#fieldset-0')) {
                if (value === '') {
                    $(this).find('label').each(function () {
                        $(this).remove();
                    });
                } else {
                    if ($(this).find('input[value="' + value + '"]').length > 0) {
                        $(this).find('input[value="' + value + '"]').parent().remove();
                    }
                }
            }

            if ($(this).hasClass('master')) {
                $(this).find('input').each(function () {
                    if (this.checked) {
                        channelsSelected = true;
                    }
                });
            }
        });

        if (!channelsSelected) {
            formNavbar.find('.circle').each(function () {
                $(this).removeClass('is-complete');
            });
        }
    }

    function repaintChart() {
        var channelsTotal = 0;
        var data = plotChartValues(isFullChart);
        var scoreModifier = getScoreModifier();

        RadarChart('.form .form__chart', data, radarChartOptions);
        RadarChart('.results .form__chart', data, radarChartOptions);

        $('.form svg, .results svg').each(function () {
            styleSvgChart($(this), isFullChart);
        });
    }

    function scrollPageToTopOfForm() {
        $('html, body').animate({
            scrollTop: $('header').offset().top
        }, 0);
    }

    function setButtonNextDisabled() {
        questions.each(function (key, question) {
            var isDisabled = true;

            if ($(question).closest('fieldset').is('#fieldset-0')) {
                $(question).find('input').each(function () {
                    if (isDisabled === false) {
                        return;
                    }

                    if (this.checked) {
                        isDisabled = false;
                    }
                });
                $(question).find('.btn--next').prop('disabled', isDisabled);
            }
        });
    }

    function setLocalStorage() {
        var question = $('.form__progress .btn.is-selected').data('question');
        var currentQuestion = formatId(question);
        var items = [];

        $('#cxmaturity input').each(function () {
            var id = this.id;

            if (this.checked) {
                items.push(id);
            }
        });

        localStorage.setItem(localStorageItem, JSON.stringify({ 'inputs': items, 'currentQuestion': currentQuestion, 'questionsCompleted': questionsCompleted }));
    }

    function stripHashtagOnPageLoad() {
        if (location.hash) {
            history.pushState(null, null, '');
        }
    }

    function styleSvgChart(svg) {
        var chartDisplay = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

        //* Update inline chart svg values
        var axisLines = svg.find('.axis');
        var axisLineIndex = 0;
        var gridCircleColors = ['#FFFF00', '#FF6600', '#FF0000', '#FF00FF'];
        var gridCircles = svg.find('.gridCircle');
        var gridCircleIndex;
        var radarCircles = svg.find('.radarCircle');

        for (gridCircleIndex = 0; gridCircleIndex < gridCircleColors.length; gridCircleIndex++) {
            gridCircles[gridCircleIndex].style.stroke = gridCircleColors[gridCircleIndex];
            gridCircles[gridCircleIndex].style.fillOpacity = 0.0375;
            gridCircles[gridCircleIndex].style.filter = 'none';
            gridCircles[gridCircleIndex].style.strokeDasharray = 1;
            gridCircles[gridCircleIndex].style.strokeOpacity = 1;
            gridCircles[gridCircleIndex].style.strokeWidth = 2;
        }

        axisLines.each(function () {
            var line = $(this).find('.line');

            line.css('stroke', '#A3E9F8');
            if (chartDisplay) {
                if (axisLineIndex % 11 === 0) {
                    line.css('opacity', 1);
                    line.css('stroke-dasharray', '1,0');
                    line.css('strokeWidth', '2px');
                } else {
                    line.css('opacity', 0.54);
                    line.css('stroke-dasharray', '2,4');
                    line.css('stroke-width', '1px');
                }
            } else {
                line.css('opacity', 1);
                line.css('stroke-dasharray', '1,0');
                line.css('stroke-width', '2px');
            }
            axisLineIndex++;
        });

        radarCircles.each(function () {
            $(this).remove();
        });
    }

    function toggleChartDetails() {
        $('.form-chart-wrapper').toggleClass('js-showDetails');
    }

    function toggleChartDisplay() {
        var chartType = $(this).data('chart');

        isFullChart = chartType === 'fullChart' ? true : false;

        chart.prop('class', '').addClass('form__chart').addClass('form__chart--' + chartType);
        repaintChart();
    }

    function toggleFormNavbarSelected() {
        var fieldset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var question = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

        var channels = $('#fieldset-0 .master');
        var parentLi = fieldset === '' ? $(this).closest('[data-fieldset]').data('fieldset') : fieldset;
        var question = question === '' ? $(this).closest('[data-question]').data('question') : question;

        channelsSelected = false;
        channels.find('input').each(function () {
            if (this.checked) {
                channelsSelected = true;
            }
        });

        formNavbar.find('.circle').each(function () {
            $(this).removeClass('is-selected');
        });

        formNavbar.find('li').each(function () {
            $(this).removeClass('is-selected');
        });

        if (!channelsSelected) {
            fieldset = channels.parent().data('fieldset');
            question = channels.data('question');

            formNavbar.find('.circle').each(function () {
                $(this).removeClass('is-complete');
            });
        }

        formNavbar.find('[data-question="' + question + '"]').addClass('is-selected').addClass('is-complete');
        formNavbar.find('.btn.is-selected').closest('[data-fieldset]').addClass('is-selected'); //Order is important! Must come after previous 'find' statement
    }

    function toggleLabelSelected() {
        var isChecked = this.checked ? true : false;
        var question = $(this).closest('.question').data('question');

        if ($(this).prop('type') === 'radio') {
            var name = $(this).prop('name');

            $('input[name="' + name + '"]').each(function (key, radio) {
                $(radio).parent().removeClass('is-selected');
                $(radio).prop('checked', false);
            });

            $(this).prop('checked', true);
            scoreModifier = parseFloat($(this).data('modifier'));
        }

        $(this).parent().toggleClass('is-selected');

        if (isChecked) {
            formNavbar.find('[data-question="' + question + '"]').addClass('is-complete');
        } else {
            formNavbar.find('[data-question="' + question + '"]').removeClass('is-complete');
        }
    }

    function updateChartSize() {
        var newChartSize = !$('section.form').hasClass('is-hidden') ? $('section.form .form__chart').innerWidth() : $('section.results .form__chart').innerWidth();

        if (newChartSize !== radarChartOptions.w) {
            radarChartOptions.h = newChartSize - chartMargin.top * 2;
            radarChartOptions.w = newChartSize - chartMargin.top * 2;

            repaintChart();
        }
    }

    function updateHashLink() {
        var savedForm = getLocalStorage();
        var parseSavedForm = JSON.parse(savedForm);

        if (savedForm && parseSavedForm.currentQuestion) {
            $('.intro__buttons .btn--resume').prop('href', '#' + parseSavedForm.currentQuestion);
        }
    }

    function updateLocalStorage() {
        deleteLocalStorage();

        setTimeout(function () {
            setLocalStorage();
        }, 500);
    }

    function updateOverallScore() {
        var chartData = getChartValues();
        var overallScore = parseFloat(chartData['totalScore'] / chartData['maxPossibleScore'] * 100).toFixed(2);
        $('.overall-score').text(overallScore);
    }

    function updateResultsContainer(chartData) {
        var overallScore = parseFloat(chartData['totalScore'] / chartData['maxPossibleScore'] * 100).toFixed(2);
        var sectionValues = ['capabilities', 'design', 'reach'];

        $('.overall-score').html(overallScore);

        for (var i = 0; i < fieldsets.length; i++) {
            var fs = fieldsets[i];
            var fsIndex = $(fs).attr('id').replace('fieldset-', '');
            var fsName = $(fs).data('fieldset');
            var score = parseFloat(chartData['fieldsets'][fsIndex]['averageScore']);

            $('.maturity-level--' + fsName).html(getMaturityLevel(score));
            $('.score__value .' + fsName).attr('data-score', Math.round(score * 100));
            $('.score__value .' + fsName).css('width', (score * 100).toFixed(2) + '%');

            if (score >= 0.89) {
                $('.score__value .' + fsName).addClass('over-90');
            }
        }

        if (chartData['fieldsets'][0]['averageScore'] <= 0.5) {
            $('.digital-emerging').show();
        } else {
            $('.digital-leading').show();
        }

        if (chartData['questions'][4]['channelsSelected'].indexOf('Mobile App - Smartphone') === -1) {
            $('.capabilities-mobile').show();
        }

        if (chartData['questions'][5]['channelsSelected'].indexOf('Chat - Live') === -1 && chartData['questions'][5]['channelsSelected'].indexOf('Chat - Bots')) {
            $('.capabilities-chat').show();
        }

        if (chartData['questions'][6]['score'] <= 0.5 || chartData['questions'][8]['score'] <= 0.5) {
            $('.design-appeal').show();
        }

        if (chartData['questions'][7]['score'] <= 0.5) {
            $('.design-task-orientation').show();
        }

        if (chartData['questions'][9]['score'] <= 0.5) {
            $('.design-personalized').show();
        }
    }

    getChannels();
    getFreeEmailProviders();
    getQuestions();

    $('body').on('change', '#fieldset-0 input', function () {
        if (this.checked) {
            addQuestionInput(this.value);
        } else {
            removeQuestionInput(this.value);
        }
    });

    $('body').on('click', '.btn--clear', clearQuestionValues);
    $('body').on('click', '.btn--clear', setButtonNextDisabled);
    $('body').on('click', '.btn--clear', updateLocalStorage);
    $('body').on('click', '.btn--next', navigateForm);
    $('body').on('click', '.btn--next', scrollPageToTopOfForm);
    $('body').on('click', '.btn--prev', navigateForm);
    $('body').on('click', '.btn--prev', scrollPageToTopOfForm);
    //$('body').on('click', '#downloadPdf', generatePdfLink);
    $('body').on('click', '.form__chart .btn', toggleChartDisplay);
    $('body').on('click', '.form__chartDetailsToggle', toggleChartDetails);
    $('body').on('submit', '.results__form form', generatePdfLink);
    $('body').on('click', '.intro__buttons button', updateChartSize);
    $('body').on('click', '.intro__buttons .btn--start', displayEmptyForm);
    $('body').on('click', '.intro__buttons .btn--resume', displayFirstIncompleteQuestion);
    $('body').on('click', '#cxmaturity .navbar .circle.is-complete', navigateForm);
    $('body').on('click', '#cxmaturity .navbar ul > li', navigateForm);
    $('body').on('change', 'input[type="checkbox"], input[type="radio"]', getTotalScore);
    $('body').on('change', 'input[type="checkbox"], input[type="radio"]', repaintChart);
    $('body').on('change', 'input[type="checkbox"], input[type="radio"]', setButtonNextDisabled);
    $('body').on('change', 'input[type="checkbox"], input[type="radio"]', toggleLabelSelected);
    $('body').on('change', 'input[type="checkbox"], input[type="radio"]', updateLocalStorage);
    $('body').on('change', '.question[data-question="Digital and Physical"] input', getScoreModifier);
    $(document).ready(addResumeButton);
    $(document).ready(stripHashtagOnPageLoad);
    $(document).ready(updateHashLink);
    $(window).on('popstate', navigateFormPopstate);
    $(window).on('resize', updateChartSize);

    //Call function to draw the Radar chart
    //RadarChart('.content__chart', data, radarChartOptions);

    $('a.btn').on('click', function (e) {
        e.preventDefault();
        history.pushState(null, null, $(this).attr('href'));
    });
})(jQuery);

//alert(xhr.status);
//alert(thrownError);

//animateQuestion( $(`.question[data-question="${question.data('question')}"]`) );
